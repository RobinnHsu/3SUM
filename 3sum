impl Solution {
    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {
        let mut result = Vec::new();
        let mut nums = nums;
        
        // Sort the array first
        nums.sort();
        
        let n = nums.len();
        
        for i in 0..n {
            // Skip duplicates for the first element
            if i > 0 && nums[i] == nums[i - 1] {
                continue;
            }
            
            let mut left = i + 1;
            let mut right = n - 1;
            
            while left < right {
                let sum = nums[i] + nums[left] + nums[right];
                
                if sum == 0 {
                    result.push(vec![nums[i], nums[left], nums[right]]);
                    
                    // Skip duplicates for left pointer
                    while left < right && nums[left] == nums[left + 1] {
                        left += 1;
                    }
                    // Skip duplicates for right pointer
                    while left < right && nums[right] == nums[right - 1] {
                        right -= 1;
                    }
                    
                    left += 1;
                    right -= 1;
                } else if sum < 0 {
                    left += 1;
                } else {
                    right -= 1;
                }
            }
        }
        
        result
    }
}

// Alternative standalone function version
pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {
    let mut result = Vec::new();
    let mut nums = nums;
    
    if nums.len() < 3 {
        return result;
    }
    
    nums.sort();
    let n = nums.len();
    
    for i in 0..n - 2 {
        // Skip duplicates for the first element
        if i > 0 && nums[i] == nums[i - 1] {
            continue;
        }
        
        let mut left = i + 1;
        let mut right = n - 1;
        
        while left < right {
            let sum = nums[i] + nums[left] + nums[right];
            
            match sum.cmp(&0) {
                std::cmp::Ordering::Equal => {
                    result.push(vec![nums[i], nums[left], nums[right]]);
                    
                    // Skip duplicates for left pointer
                    while left < right && nums[left] == nums[left + 1] {
                        left += 1;
                    }
                    // Skip duplicates for right pointer
                    while left < right && nums[right] == nums[right - 1] {
                        right -= 1;
                    }
                    
                    left += 1;
                    right -= 1;
                }
                std::cmp::Ordering::Less => left += 1,
                std::cmp::Ordering::Greater => right -= 1,
            }
        }
    }
    
    result
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_example_1() {
        let nums = vec![-1, 0, 1, 2, -1, -4];
        let result = three_sum(nums);
        assert_eq!(result.len(), 2);
        assert!(result.contains(&vec![-1, -1, 2]));
        assert!(result.contains(&vec![-1, 0, 1]));
    }

    #[test]
    fn test_example_2() {
        let nums = vec![0, 1, 1];
        let result = three_sum(nums);
        assert_eq!(result, Vec::<Vec<i32>>::new());
    }

    #[test]
    fn test_example_3() {
        let nums = vec![0, 0, 0];
        let result = three_sum(nums);
        assert_eq!(result, vec![vec![0, 0, 0]]);
    }

    #[test]
    fn test_empty_array() {
        let nums = vec![];
        let result = three_sum(nums);
        assert_eq!(result, Vec::<Vec<i32>>::new());
    }

    #[test]
    fn test_no_solution() {
        let nums = vec![1, 2, 3];
        let result = three_sum(nums);
        assert_eq!(result, Vec::<Vec<i32>>::new());
    }
}
